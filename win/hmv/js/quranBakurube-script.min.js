$(document).ready(() => {
  $.extend(!0, $.fn.dataTable.defaults, {});
  window.matchMedia("(min-width: 900px)").matches
    ? $.extend(!0, $.fn.dataTable.defaults, {
        dom: '<"dTop"pBfl>rtip',
        pageLength: 3,
        keys: { clipboardOrthogonal: "export" },
        language: {
          paginate: {
            first: "<<&nbsp;ފުރަތަމަ",
            previous: "<&nbsp;ފަހަތަށް",
            next: "ކުރިއަށް&nbsp;>",
            last: "ފަހު&nbsp;>>",
            info: "_INPUT_",
          },
        },
      })
    : $.extend(!0, $.fn.dataTable.defaults, {
        dom: '<"mTop"fl> + <"mTop2"p> + <"mTop3"B> rtip',
        pageLength: 1,
        language: {
          paginate: {
            first: "<<",
            previous: "<",
            next: ">",
            last: ">>",
            info: "_INPUT_",
          },
        },
      });
  const c = $("#quranBakurubeTable").DataTable({
    data: quranBakurube_dataSet,
    columns: [
      {
        data: 0,
        title: "ސޫރަތުގެ ނަން",
        render: function (a, b, d) {
          return a.replace(/[َ|ً|ُ|ٌ|ِ|ٍ|ْ|ّ|~]/g, "");
        },
      },
      { data: 1, title: "ޖުޒް #" },
      { data: 2, title: "އާޔަތް #" },
      {
        data: 3,
        title: "ޤުރްއާން އަރަބިން",
        render: function (a, b, d) {
          a = a.replace(/\s([\u0660-\u0669]+)/, " $1");
          return ("﴿" + a + "﴾")
            .replace(
              "﴿بِسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n",
              'بِسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n<br class="br"><br class="br">﴿'
            )
            .replace(
              "﴿بِّسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n",
              'بِّسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n<br class="br"><br class="br">﴿'
            );
        },
      },
      {
        data: 3,
        title: "ޤުރްއާން ފިލިނުޖަހާ",
        render: function (a, b, d) {
          a = a.replace(/\s([\u0660-\u0669]+)/, " $1");
          return ("﴿" + a + "﴾")
            .replace(
              "﴿بِسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n",
              'بِسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n<br class="br"><br class="br">﴿'
            )
            .replace(
              "﴿بِّسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n",
              'بِّسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n<br class="br"><br class="br">﴿'
            )
            .replace(/ـ/g, "")
            .replace(/[^\u0621-\u064A|\s|<br class="br">]/g, "")
            .replace(/\s\s/g, " ");
        },
      },
      { data: 4, title: "ލަފްޒީ ތަރުޖަމާ" },
      { data: 5, title: "އިޖްމާލީ މާނަ" },
    ],
    columnDefs: [
      {
        targets: 5,
        render: function (a, b, d) {
          return (
            a + '<br class="Qbr">‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾<br class="LQbr">'
          ).replace(/\n/g, '\t<br class="br">');
        },
      },
      {
        targets: "_all",
        render: function (a, b, d) {
          return a.replace(/\n/g, '\t<br class="br">');
        },
      },
      {
        className: "qCol1",
        targets: [0],
        visible: !0,
        searchable: !0,
        searchPanes: { show: !0 },
      },
      {
        className: "qCol2",
        targets: [1],
        visible: !1,
        searchable: !0,
        searchPanes: { show: !0 },
      },
      {
        className: "qCol3",
        targets: [2],
        visible: !1,
        searchable: !0,
        searchPanes: { show: !1 },
      },
      {
        className: "qCol4",
        targets: [3],
        visible: !0,
        searchable: !1,
        searchPanes: { show: !1 },
      },
      {
        className: "qCol5",
        targets: [4],
        visible: !1,
        searchable: !0,
        searchPanes: { show: !1 },
      },
      {
        className: "qCol7",
        targets: [5],
        visible: !0,
        searchable: !0,
        searchPanes: { show: !1 },
      },
      {
        className: "qCol8",
        targets: [6],
        visible: !0,
        searchable: !0,
        searchPanes: { show: !1 },
      },
      {
        targets: "all",
        render(a, b, d, h) {
          return "export" === b
            ? ((b = document.createElement("div")),
              (b.innerHTML = a),
              b.innerText)
            : a;
        },
      },
    ],
    autoWidth: !1,
    deferRender: !0,
    processing: !0,
    ordering: !1,
    bstateSave: !0,
    stateDuration: "86400",
    orderClasses: !1,
    pagingType: "input",
    searchDelay: 1300,
    lengthMenu: [
      [1, 2, 3, 5, 10, 20, 30, 50, 100, 200, 300],
      ["1 ދައްކާ", 2, 3, 5, 10, 20, 30, 50, 100, 200, "300"],
    ],
    keepConditions: !0,
    keys: !0,
    mark: !0,
    search: { smart: !0 },
    language: {
      buttons: {
        copyTitle: "ކޮޕީ",
        copySuccess: { 1: "ކޮޕީ ވީ 1 އާޔަތް", _: "ކޮޕީ ވީ %d އާޔަތް" },
      },
      info: "_TOTAL_ އާޔަތުގެ ތެރެއިން _START_ އިން _END_ އަށް",
      infoFiltered: "(ޖުމްލަ ބެލެވުނީ _MAX_)",
      infoEmpty: "— ނުފެނުނު —",
      lengthMenu: "_MENU_",
      search: "",
      searchPlaceholder: 'ސީދާ ލަފްޒު "މިހެން ހޯދާ"',
      zeroRecords: "<br><br><br><br>— ނުފެނުނު —<br><br><br><br>",
      searchPanes: {
        emptyMessage: "— ވަކި ނަމެއް ނެތް —",
        clearMessage: "ހުރިހާ ފިލްޓާއެއް ދުއްވާލާ",
        collapse: { 0: "ފިލްޓާތައް", _: "ފިލްޓާތައް (%d)" },
        title: {
          _: "%d ފިލްޓާ ކުރެވިފާ",
          0: "0 ފިލްޓާ ކުރެވިފާ",
          1: "1 ފިލްޓާ ކުރެވިފާ",
        },
      },
    },
    buttons: [
      {
        extend: "copy",
        key: { key: "c", shiftKey: !0 },
        text: "ކޮޕީ",
        messageTop: "ބަކުރުބޭގެ ޤުރްއާން ތަރުޖަމާ",
        title: "",
        customize(a) {
          a = a.replace(/\r\n/g, "\t");
          a = a.replace(/\n/g, "\t");
          a = a.replace(/ސޫރަތުގެ ނަން\t/g, "");
          a = a.replace(/ޖުޒް #\t/g, "");
          a = a.replace(/އާޔަތް #\t/g, "");
          a = a.replace(/ޤުރްއާން އަރަބިން\t/g, "");
          a = a.replace(/ޤުރްއާން ފިލިނުޖަހާ\t/g, "");
          a = a.replace(/ރަސްމު އުޘްމާނީ\t/g, "");
          a = a.replace(/ލަފްޒީ ތަރުޖަމާ\t/g, "");
          a = a.replace(/އިޖްމާލީ މާނަ\t/g, "");
          a = a.replace(
            /‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\t/g,
            "\n\n‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n"
          );
          a = a.replace(/\t\t/g, "\t");
          a = a.replace(/\t/g, "\n\n");
          a = a.replace(/\s\s/g, "\n\n");
          a = a.replace(/\n\n\n\n/g, "\n\n");
          a = a.replace(/\n\n\n/g, "\n\n");
          a = a.replace(
            /\ud835\udfe2 |\ud835\udfe3 |\ud835\udfe4 |\ud835\udfe5 |\ud835\udfe6 |\ud835\udfe7 |\ud835\udfe8 |\ud835\udfe9 |\ud835\udfea |\ud835\udfeb /g,
            ""
          );
          return (a = a.replace(
            /\ud835\udfe2|\ud835\udfe3|\ud835\udfe4|\ud835\udfe5|\ud835\udfe6|\ud835\udfe7|\ud835\udfe8|\ud835\udfe9|\ud835\udfea|\ud835\udfeb/g,
            ""
          ));
        },
        exportOptions: { columns: [":visible"], rows: [":visible"] },
      },
      {
        extend: "searchPanes",
        key: { key: "f", shiftKey: !0 },
        config: {
          collapse: !1,
          orderable: !1,
          columns: [0, 1],
          cascadePanes: !0,
          dtOpts: { select: { style: "multi" }, ordering: !1 },
        },
      },
      {
        extend: "colvis",
        key: { key: "s", shiftKey: !0 },
        text: "އިތުރު ބަރިތައް",
        background: !1,
      },
    ],
  });
  document.addEventListener(
    "touchstart",
    function (a) {
      a = (a.touches || a.originalEvent.touches)[0];
      f = a.clientX;
      g = a.clientY;
    },
    !1
  );
  document.addEventListener(
    "touchmove",
    function (a) {
      if (f && g) {
        var b = f - a.touches[0].clientX;
        Math.abs(b) > Math.abs(g - a.touches[0].clientY) &&
          (0 < b
            ? c.page("previous").draw("page")
            : c.page("next").draw("page"));
        g = f = null;
      }
    },
    !1
  );
  let f = null,
    g = null;
  if (window.matchMedia("(min-width: 900px)").matches)
    $(".dataTable").on("page.dt", () => {
      $("html, body").animate({ scrollTop: 0 }, "fast");
      $("main-content").focus();
      $(window).scrollTop();
    });
  else
    $(".dataTable").on("page.dt", () => {
      $("html, body").animate({ scrollTop: 178 }, "fast");
      $("main-content").focus();
      $(window).scrollTop();
    });
  window.matchMedia("(min-width: 900px)").matches &&
    $("div.dataTables_filter input", c.table().container()).focus();
  $(".paginate_input").prop("type", "search");
  $(".paginate_input").attr("placeholder", "ސަފުހާ...");
  $(document).ready(function () {
    $("#footer").removeClass("hidden");
  });
  var e = 0;
  $("tbody").on("click", "tr", function () {
    0 == e
      ? (e = new Date().getTime())
      : 800 > new Date().getTime() - e
      ? ("" !== c.search() && c.search("").draw(),
        c.row(this).draw().show().select().draw(!1),
        (e = 0))
      : (e = new Date().getTime());
  });
  $(".dataTables_filter input").on("keyup click", function () {
    var a = $(this).val();
    a = a
      .replace(
        "﴿بِسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n",
        'بِسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n<br class="br"><br class="br">﴿'
      )
      .replace(
        "﴿بِّسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n",
        'بِّسْمِ اللَّهِ الرَّحْمَـٰنِ الرَّحِيمِ\n\n<br class="br"><br class="br">﴿'
      )
      .replace(/ـ/g, "")
      .replace(
        /[^\u0621-\u064A|^\u0780-\u07B1|^\d|^\ud835\udfe3||^\ud835\udfe3|^\ud835\udfe4|^\ud835\udfe5|^\ud835\udfe6|^\ud835\udfe7|^\ud835\udfe8|^\ud835\udfe9|^\ud835\udfea|^\ud835\udfeb|^\ud835\udfe2|\s|<br class="br">]/g,
        ""
      )
      .replace(/\s\s/g, " ");
    $(this).val(a);
  });
  $("#quranBakurubeTable").on("draw.dt", function () {
    document.getElementById("surahNameID").value = document
      .getElementsByClassName("qCol1")[1]
      .innerText.replace(/سورة /g, "");
    document.getElementById("ayahNoID").value = document
      .getElementsByClassName("qCol4")[1]
      .innerText.replace(/[^١|٢|٣|٤|٥|٦|٧|٨|٩|٠]/g, "")
      .replace(/٠/g, "0")
      .replace(/١/g, "1")
      .replace(/٢/g, "2")
      .replace(/٣/g, "3")
      .replace(/٤/g, "4")
      .replace(/٥/g, "5")
      .replace(/٦/g, "6")
      .replace(/٧/g, "7")
      .replace(/٨/g, "8")
      .replace(/٩/g, "9");
  });
});
